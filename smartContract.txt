// contracts/DarkDimension.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

contract DarkDimension is ERC721 {
    using Counters for Counters.Counter;
    Counters.Counter private _tokenIds;

    // State variable for the token message
    string private _tokenMessage;
    //string providedName = "dark-dimension";
    //string providedSymbol = "RMN-MNMDII";
    // Constructor with the name and symbol for the token
    constructor() ERC721("dark-dimension", "RMN-MNMDII") {
        // Set the token message
        _tokenMessage = "Beyond borders with DeFi - rjain116";
    }

    // Function to award a new item
    function awardItem(address player, string memory tokenURI)
        public
        returns (uint256)
    {
        _tokenIds.increment();

        uint256 newItemId = _tokenIds.current();
        _mint(player, newItemId);
        // If your ERC721 implementation has _setTokenURI, uncomment the following line
        //_setTokenURI(newItemId, tokenURI);

        return newItemId;
    }

    // Function to return the token message
    function message() public view returns (string memory) {
        return _tokenMessage;
    }

    // Function to return the token name
    //function name() public view override returns (string memory) {
    //    return providedName;
    //}

    // Function to return the token symbol
    //function symbol() public view override returns (string memory) {
    //    return providedSymbol;
    //}

}
